/****in HAProxy you can:
f r o n t e n d  (before balancer):
client timeout
acces control (for example allows USA disable Russia)
Bind
b a c k e n d (after balancer):

timeout of connection
timeout of server
Balance principle: (roundrobin, leastconn, source)
******
HAProxy can runs as TLS terminator (backend http) or TLS through (backend https)
There also enable a 'Multiple frontends to multiple backends' mode 
The HAProxy can works on layer 4 (TCP/UDP) or layer 7 (application, for example HTTP)
Default mode - TCP (layer 4)

 /****to run haproxy type -" $ sudo haproxy -f test.cfg " in the console ****/

/*******s n i p p e t  o n e  - layer4 balancing  ***/
/**save it with .cfg extantion, run $ sudo haproxy -f tst.cfg **/

frontend myfrontend80
    bind *:80
    timeout client 60s
    mode tcp
    default_backend myservers

backend myservers
    timeout connect 10s
    timeout server 100s
    mode tcp
    server serverone 127.0.0.1:1800
    server servertwo 127.0.0.1:1807
    
 /**************************s n i p p e t   t w o - layer 7 **/
 
 frontend myfrontend80
    bind *:80
    timeout client 60s
    mode http
    default_backend myservers

backend myservers
    timeout connect 10s
    timeout server 100s
    mode http
    server serverone 127.0.0.1:1800
    server servertwo 127.0.0.1:1807
    
    /************************************
    when we need to create two groups of clients - one part goes to /app1  an another - to  /app2
    when a client query has a default path '/' - then 'allservers'
   *********************/
   
frontend myfrontend80
    bind *:80
    timeout client 60s
    mode http
    acl app1 path_end -i /app1
    acl app2 path_end -i /app2

    use_backend app1Servers if app1
    use_backend app2Servers if app2

    default_backend allservers

backend app1Servers
    timeout connect 10s
    timeout server 10s
    mode http
    server serverone 127.0.0.1:1800
    server servertwo 127.0.0.1:1801


backend app2Servers
    timeout connect 10s
    timeout server 10s
    mode http
    server serverthree 127.0.0.1:1802
    server serverfour 127.0.0.1:1803

backend allservers
    timeout connect 10s
    timeout server 10s
    mode http
    server serverone 127.0.0.1:1800
    server servertwo 127.0.0.1:1801
    
    
/***********b a l a n c i n g   a l g o r y t h m   s e t t i n g****/
///to making a client always connect to one server - set 'balance source'
//when upgrade a page in browser - the request sending to the same server as the first time load

frontend myfrontend80
    bind *:80
    timeout client 60s
    mode http
    acl app1 path_end -i /app1
    acl app2 path_end -i /app2

    use_backend app1Servers if app1
    use_backend app2Servers if app2

    default_backend allservers

backend app1Servers
    timeout connect 10s
    timeout server 10s
    balance source
    mode http
    server serverone 127.0.0.1:1800
    server servertwo 127.0.0.1:1801


backend app2Servers
    timeout connect 10s
    timeout server 10s
    mode http
    server serverthree 127.0.0.1:1802
    server serverfour 127.0.0.1:1803

backend allservers
    timeout connect 10s
    timeout server 10s
    mode http
    server serverone 127.0.0.1:1800
    server servertwo 127.0.0.1:1801
    
    //****************l o c k i n g   p a t h s*******/
    ///**to blocking path for example '/admin' in requests - use 'deny' option
    
frontend myfrontend80
    bind *:80
    timeout client 60s
    mode http
    acl app1 path_end -i /app1
    acl app2 path_end -i /app2
    http-request deny if { path -i -m beg /admin }
    use_backend app1Servers if app1
    use_backend app2Servers if app2
    
    ///**** to create HTTPS termination (public tcp , private - tls) use the following options:
    frontend myfrontend80
    bind *:80
    bind *:443 ssl crt /home/ubuntu/proxy/mydomain.crt
    timeout client 60s
    mode http
    acl app1 path_end -i /app1
    acl app2 path_end -i /app2
    http-request deny if { path -i -m beg /admin }
    use_backend app1Servers if app1
    use_backend app2Servers if app2
    
    

    
