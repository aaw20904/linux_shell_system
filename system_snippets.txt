 
 https://medium.com/@suJJJan/node-authentication-using-passport-js-760f7b52ce14
 https://auth0.com/docs/libraries/custom-signup
 https://auth0.com/blog/customize-user-registration-experience-with-auth0-actions/
 //hiogh relability reserve serer VRRP protocol:
 https://youtu.be/Zgy1miPsTNs?list=PLQnljOFTspQWGuRmwojJ6LiV0ejm6eOcs
 LET~S ENCRYPT runs with Nodejs:
 https://itnext.io/node-express-letsencrypt-generate-a-free-ssl-certificate-and-run-an-https-server-in-5-minutes-a730fbe528ca
 chep certs COMODO:
 https://www.ssls.com/brand/comodo-ssl-certificates?gclid=CjwKCAjwzuqgBhAcEiwAdj5dRv3P6Q1bCVLI0NSGQ1wbSkHUG-OKNEoctenhJaLaqVqm3X9NMWyVThoCC_MQAvD_BwE
 
 ***********SSH CONNECTION**********

█▀ █▀ █░█   █▀█ █▀▀ █▀▄▀█ █▀█ ▀█▀ █▀▀   █▀▀ █▀█ █▄░█ █▄░█ █▀▀ █▀▀ ▀█▀
▄█ ▄█ █▀█   █▀▄ ██▄ █░▀░█ █▄█ ░█░ ██▄   █▄▄ █▄█ █░▀█ █░▀█ ██▄ █▄▄ ░█░

//for the access from the VS Code and other applications-
// you can:
// A) create an asymmetric ssh - key:
// run on the CLIENT mashine (who will have been coonecting to the remote server) as Admin in the terminal - 

	ssh-keygen
	
// enter a filename (for example mykey.key), and  password
//after generation - there will be TWO files: 'mykey.key' - (a private key) 'mykey.key.pub' - (a public key)

// B) Open the remote server - a file  /userName/.ssh/authorized_keys
// c) Insert on the new string a content of file 'mykey.key.pub' - the public key
// d) Test a connection - in the VS Code open a file /.ssh/config and create a new connection:
/********
      Host remote_cloud
  HostName 18.134.157.188
  User ubuntu
  IdentityFile d:\aws\xone.key 
 
 ********/
// E) OPTIONAL - test a connection from the  Power Shell as Administrator:
    ssh -i d:/aws/xone.key  ubuntu@18.134.157.188
----------------------------------------------------------------------------


█▀▄ █▀█ █▀▀ █▄▀ █▀▀ █▀█   █ █▄░█ █▀ ▀█▀ ▄▀█ █░░ █░░   ▄▀█ █▀█ ▀█▀
█▄▀ █▄█ █▄▄ █░█ ██▄ █▀▄   █ █░▀█ ▄█ ░█░ █▀█ █▄▄ █▄▄   █▀█ █▀▀ ░█░

$ sudo apt-get update
$ sudo apt install docker.io
$ sudo snap install docker
/**test the app:**/
$ docker --version
$ sudo docker run hello-world



█▀▀█ █▀▀ █▀▀▄ ─▀─ █▀▀ 　 ─▀─ █▀▀▄ █▀▀ ▀▀█▀▀ █▀▀█ █── █── 
█▄▄▀ █▀▀ █──█ ▀█▀ ▀▀█ 　 ▀█▀ █──█ ▀▀█ ──█── █▄▄█ █── █── 
▀─▀▀ ▀▀▀ ▀▀▀─ ▀▀▀ ▀▀▀ 　 ▀▀▀ ▀──▀ ▀▀▀ ──▀── ▀──▀ ▀▀▀ ▀▀▀

$ sudo apt update
$ sudo apt install redis-server
  open a file:
/etc/redis/redis.conf
 find a directive:
       supervised no
 change it on:
       supervised systemd
  Save the changes and close the file.
Finally, restart the Redis service by running:
   $ sudo systemctl restart redis.service
Check the status of the Redis service by running the command:
   $ sudo systemctl status redis
check connection: enter the following in the terminal window:
   $ redis-cli
This moves you to the redis-cli command prompt. To test the connectivity, run:
  ping
The response will be 'PONG'
 
 

----------------------------------------------------------------------------


█▀▄▀█ █▄█ █▀ █▀█ █░░   █▀ █▀▀ █▀▀ █░█ █▀█ █▀▀   █ █▄░█ █▀ ▀█▀ ▄▀█ █░░ █░░
█░▀░█ ░█░ ▄█ ▀▀█ █▄▄   ▄█ ██▄ █▄▄ █▄█ █▀▄ ██▄   █ █░▀█ ▄█ ░█░ █▀█ █▄▄ █▄▄
*****************M Y   S Q L***********  SECURE INSTALLATION *****
$ sudo apt update
$ sudo apt install mysql-server

        check a status of the service:
$ sudo systemctl status mysql
	after installation START the service:
$ sudo systemctl start mysql.service

$ sudo mysql
/*Run the following SQL query:*/
	ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'SetRootPasswordHere';
	exit
/*after it you can install*/
	$ sudo mysql_secure_installation
/*****LOG IN in MYsql**/
	$ sudo mysql -u root -p
----------------------------------------------------------------------------


█▀▄▀█ █▄█ █▀ █▀█ █░░   █▀█ █▀▀ █▀▄▀█ █▀█ ▀█▀ █▀▀   ▄▀█ █▀▀ █▀▀ █▀▀ █▀ █▀
█░▀░█ ░█░ ▄█ ▀▀█ █▄▄   █▀▄ ██▄ █░▀░█ █▄█ ░█░ ██▄   █▀█ █▄▄ █▄▄ ██▄ ▄█ ▄█
╚═╝░░╚═╝░╚════╝░░╚════╝░

/*********************MYSQL *REMOTE ACCESS******/
//for the begin, allow remote access.
//To do it - open the file 
     /etc/mysql/mysql.conf.d/mysqld.cnf 
..and change the string:
 
	bind-address            = 127.0.0.1

to allow access from anywhere - type 0.0.0.0 instead of 127.0.0.1
restart
	$ sudo systemctl restart mysql
run mySQL as sudo user and create a new user, run with the -A option:
	$ sudo mysql -u root -p -A
	mysql> USE mysql;
	mysql> SELECT user FROM user;
create a user:
	mydsql> CREATE USER 'sammy'@'remote_host' IDENTIFIED WITH mysql_native_password BY 'password';
or:
	mysql> CREATE USER 'sammy'@'remote_server_ip' IDENTIFIED BY 'password';
set privilegies and premissions:
	GRANT CREATE, ALTER, DROP, INSERT, UPDATE, DELETE, SELECT, REFERENCES, RELOAD on *.* TO 'sammy'@'remote_host' WITH GRANT OPTION;
apply it:
	mysql> FLUSH PRIVILEGES;
    mysql> exit;
If you only plan to access the database server from one specific machine, you can grant that machine
 exclusive permission to connect to the database remotely with the following command. 
Make sure to replace remote_IP_address with the actual IP address of the machine you plan to connect with:
	$ sudo ufw allow from remote_IP_address to any port 3306
or from any IP:
	$ sudo ufw allow 3306
RUN sql script:
	 mysql> source \home\user\Desktop\myscript.sql;
/*************E N D *************/
----------------------------####----------------------------

█▀▀ █ ▀█▀   █▀█ █▄░█ █▀▀   █▀▀ █ █░░ █▀▀
█▄█ █ ░█░   █▄█ █░▀█ ██▄   █▀░ █ █▄▄ ██▄
***************************GIT ONE FILE GETTING**************
GET one file from github - 
   wget	https://raw.githubusercontent.com/aaw20904/exem_app/main/session_learn.sql
BRANCH 
   git clone --branch <branchname> <remote-repo-url>
-----------------------------####-----------------------------


/-------------NPM   dependences from  package.json------------*/
		$	npm install package.json
-----------------------------####----------------------------------------------


█▀ █▀ █░░   ▀█▀ █░░ █▀   █▀▀ █▀▀ █▀█ ▀█▀ █ █▀▀ █ █▀▀ ▄▀█ ▀█▀ █▀▀
▄█ ▄█ █▄▄   ░█░ █▄▄ ▄█   █▄▄ ██▄ █▀▄ ░█░ █ █▀░ █ █▄▄ █▀█ ░█░ ██▄

 /****************Certificate self-signed************/
	$ openssl req -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out example.crt -keyout example.key
	
///***********************an another method - for HAProxy:
	# Generate a unique private key (KEY)
sudo openssl genrsa -out mydomain.key 2048

# Generating a Certificate Signing Request (CSR)
sudo openssl req -new -key mydomain.key -out mydomain.csr

# Creating a Self-Signed Certificate (CRT)
openssl x509 -req -days 365 -in mydomain.csr -signkey mydomain.key -out mydomain.crt
	
/*******************************node SSL self-signed connection**/

const connectionDB = mysql.createConnection({
  user: 'tester',
  password: databasePassword,
  host: databaseHost,
  database: databaseName,
  ssl:{
    ca: fs.readFileSync('./client.csr'),
    key: fs.readFileSync('./client.key.pem'),
    rejectUnauthorized: false
  }

})


█▄░█ █▀█ █▀▄ █▀▀ ░░█ █▀   █▀▄ ▄▀█ █▀▀ █▀▄▀█ █▀█ █▄░█   █▀█ █░█ █▄░█
█░▀█ █▄█ █▄▀ ██▄ █▄█ ▄█   █▄▀ █▀█ ██▄ █░▀░█ █▄█ █░▀█   █▀▄ █▄█ █░▀█
-------------------------------###----------------
	NODEJS LAST STABLE VERSION
	***
	sudo npm cache clean -f
	sudo npm install -g n
	sudo n stable
--------------------------------####--------------------


  RUN NODEJS app as a daemon
  this approach not running successful always, therefore please SEE THE NEXT!
// 1)create a file :  /etc/systemd/system/my-app.service

			[Unit]
		Description="My Express App"

		[Service]
		Type=simple
		ExecStart=/usr/bin/node /home/ubuntu/soft/server.js serve  
		WorkingDirectory=/home/ubuntu/soft          
		Restart=always
		RestartSec=10
		StandardOutput=syslog
		StandardError=syslog
		SyslogIdentifier=MyApp
		Environment=NODE_ENV=production PORT=8080   /*port which will be listening*/

		[Install]
		WantedBy=multi-user.target
		
// 2) enable the service:
		$ sudo systemctl enable my-app.service
// 3) run the one:
		$ sudo systemctl start my-app.service
// 4)   check status:
		$ sudo  systemctl status my-app
// 5) optional: when thre was any error - check it:
		$ journalctl -u service-name.service
// 6) optional: when  .my-app.service file as been changed - please reload configuration
                $ systemctl daemon-reload

/*********RELAIBLE start! **********/	
/**this approach runs successfully in most cases***/

A) create a service file in directory  '/etc/systemd/system/nodeapp.service'. The mode of file must be 777.
B) create a directory with your project - it MUST be in system directories (not in /home/ubuntu-user).
   The linux prevents running system daemons from the user directory - there will be a message after start in the systemjournal-
   ".service: Failed at step CHDIR spawning /usr/bin/node: Permission denied"
   All the files in working directoty must have 666 or 777 access modes - use a 'chmod' command to set the one.
   Here is an example of the service  file  '/etc/systemd/system/nodeapp.service' below: 
############################################################################
   [Unit]
Description=My super nodejs app

[Service]
# set the working directory to have consistent relative paths
WorkingDirectory=/var/www/app

# start the server file (file is relative to WorkingDirectory here)
ExecStart=/usr/bin/node scrypt.js

# if process crashes, always try to restart
Restart=always

# let 60000ms between the crash and the restart
RestartSec=60000ms

# send log tot syslog here (it doesn't compete with other log config in the app itself)
StandardOutput=syslog
StandardError=syslog

# nodejs process name in syslog
SyslogIdentifier=nodejs

# user and group starting the app - the Admin (root) only can runs it (I think so))
User=root
Group=root

# set the environement (dev, prod…)
Environment=NODE_ENV=production


[Install]
# start node at multi user system level (= sysVinit runlevel 3)
WantedBy=multi-user.target

#########################################################################
		
/*******CLEAN daemon system journal*********/
    $ sudo journalctl --flush --rotate
    $ sudo journalctl --vacuum-time=1s
    

█░░ █ █▄░█ █░█ ▀▄▀   █▀ █▄█ █▀ ▀█▀ █▀▀ █▀▄▀█   ░░█ █▀█ █░█ █▀█ █▄░█ ▄▀█ █░░
█▄▄ █ █░▀█ █▄█ █░█   ▄█ ░█░ ▄█ ░█░ ██▄ █░▀░█   █▄█ █▄█ █▄█ █▀▄ █░▀█ █▀█ █▄▄
    
 /***************** SYSTEM JOURNAL OPTIONS - SIZE**************************/
    $ /etc/systemd/journald.conf
    
    #Specifies the maximum disk space that can be used by the journal in persistent storage:
     SystemMaxUse=500M   
     
    #Specifies the amount of space that the journal should leave free when adding journal entries to persistent storage.
    SystemKeepFree=100M
    
    #Controls how large individual journal files can grow to in persistent storage before being rotated.
    SystemMaxFileSize=100M
    
    ///AFTER MODIFICATION - 
    	$ sudo systemctl restart systemd-journald
   //AND FERIFY FINALLY
        $ journalctl --verify
	/******https://www.geeksforgeeks.org/difference-between-node-js-require-and-es6-import-and-export/
	
	
/*-----------------------NOHUP runs a task in background-------------------------*/
       $ nohup node script.js &
       To terminate a process running in the background, use the kill command as follows:
       $ kill -9 PID
 /*******WIRESHARK**************/
 1)Run tcpdump on target mashine:
    $ sudo tcpdump -s 0 -i eth0 -w tcpdump.pcap
 2) Change premissions:
    $ sudo chmod 644 tcpdump.pcap
 3)Copy on windows mashine (for example by the web-server)
    $  sudo python2 -m SimpleHTTPServer 80
 4)Open the file by the wireshark software
       
  TIME 
  wireshark: редактирование-параметры
https://fusebit.io/blog/process-large-files-nodejs-streams/?utm_source=www.google.com&utm_medium=referral&utm_campaign=none
https://nodesource.com/blog/understanding-streams-in-nodejs/
https://nodesource.com/blog/dive-into-NodeJs-streams

pseudo graphics symbols: https://fsymbols.com/generators/carty/


█░█ █▄▄ █░█ █▄░█ ▀█▀ █░█   █▀█ █▀▀ █▄▄ █▀█ █▀█ ▀█▀
█▄█ █▄█ █▄█ █░▀█ ░█░ █▄█   █▀▄ ██▄ █▄█ █▄█ █▄█ ░█░

You can also program your machine to reboot at a specified time.

sudo shutdown -r HH:MM

For example, the following command will reboot my system at 8:20 pm.

sudo shutdown -r 20:20

▀█▀ █ █▀▄▀█ █▀▀ ▀█ █▀█ █▄░█ █▀▀   █░█ █▄░█ █ ▀▄▀
░█░ █ █░▀░█ ██▄ █▄ █▄█ █░▀█ ██▄   █▄█ █░▀█ █ █░█
$ timedatectl list-timezones
$ sudo timedatectl set-timezone your_time_zone
$ timedatectl

/******save pre keys for the wireshark******/
in linux:
 $ export SSLKEYLOGFILE=/home/ubuntu/mysslprekeys.log
 //*****run a tcpdump in an anther window in background*******/
 $ curl ---insecure https://ipadress
 in windows:
 create an envrenment varable SSLKEYLOGFILE and assign it a path c:/temp/prekey.log
